// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Super_Cartes_Infinies.Data;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250530152622_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111112",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b68d9422-8020-4a46-9c77-65ead53f3248",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBh3C6vqLFf6PylEyENkKP9HzHrFvEtyr5gIUEkkB5g8W/9KWboWx9fn/ctnK2ohfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae5ec06d-93f5-444a-9949-915ef2e60c7b",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "User1Id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "133d7864-7659-44da-b57d-91076a43d2d3",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0fb415a-7732-493c-bb6e-e56010a2afda",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "User2Id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4be2c72d-04f9-4645-a2cc-54f4a9cb2f4e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a7dc564-f255-4fc0-9faf-e2058628fbbe",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11111111-1111-1111-1111-111111111111",
                            RoleId = "11111111-1111-1111-1111-111111111112"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Models.CardPower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PowerId");

                    b.ToTable("CardPower");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            PowerId = 1,
                            Value = 0
                        },
                        new
                        {
                            Id = 2,
                            CardId = 1,
                            PowerId = 3,
                            Value = 1
                        },
                        new
                        {
                            Id = 3,
                            CardId = 1,
                            PowerId = 4,
                            Value = 4
                        },
                        new
                        {
                            Id = 4,
                            CardId = 2,
                            PowerId = 2,
                            Value = 2
                        },
                        new
                        {
                            Id = 5,
                            CardId = 2,
                            PowerId = 3,
                            Value = 1
                        },
                        new
                        {
                            Id = 6,
                            CardId = 3,
                            PowerId = 5,
                            Value = 0
                        },
                        new
                        {
                            Id = 7,
                            CardId = 4,
                            PowerId = 4,
                            Value = 5
                        },
                        new
                        {
                            Id = 8,
                            CardId = 5,
                            PowerId = 6,
                            Value = 2
                        },
                        new
                        {
                            Id = 9,
                            CardId = 6,
                            PowerId = 7,
                            Value = 2
                        },
                        new
                        {
                            Id = 10,
                            CardId = 7,
                            PowerId = 8,
                            Value = 2
                        });
                });

            modelBuilder.Entity("Models.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Courant")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defaite")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Victoire")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("Models.Models.OwnedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeckId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("DeckId");

                    b.HasIndex("DeckId1");

                    b.HasIndex("PlayerId");

                    b.ToTable("OwnedCard");
                });

            modelBuilder.Entity("Models.Models.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NbCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rareté")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Packs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 1,
                            ImageUrl = "https://www.realite-virtuelle.com/wp-content/uploads/2021/02/rayquaza-tout-savoir-guide.jpg",
                            Name = "Le platre",
                            NbCard = 3,
                            Rareté = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Cost = 2,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQZahnOokotXrBgjZ2ywo9aQaw7oLO-JqE1rA&s",
                            Name = "La brique",
                            NbCard = 4,
                            Rareté = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Cost = 5,
                            ImageUrl = "https://m.media-amazon.com/images/I/61y74SPNLnL._AC_UF894,1000_QL80_.jpg",
                            Name = "La céramique",
                            NbCard = 5,
                            Rareté = 1,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Models.Models.PlayableCardStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayableCardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayableCardId");

                    b.HasIndex("StatusId");

                    b.ToTable("PlayableCardStatus");
                });

            modelBuilder.Entity("Models.Models.Power", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Power");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Permet à une carte d’attaquer en « premier » et de ne pas recevoir de dégât si elle tue la carte de l’adversaire.",
                            IconeURL = "🥇",
                            Name = "First strike"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lorsqu’une carte défend, elle inflige X de dégâts AVANT de recevoir des dégâts. Si l’attaquant est tué par ces dégâts, l’attaque s’arrête et le défenseur ne reçoit pas de dégâts.",
                            IconeURL = "🌹",
                            Name = "Thorns"
                        },
                        new
                        {
                            Id = 3,
                            Description = "soigne les cartes alliées de X incluant elle-même AVANT d’attaquer (mais les cartes ne peuvent pas avoir plus de health qu’au départ.)",
                            IconeURL = "💖",
                            Name = "Heal"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Augmente de X les dégâts que la carte inflige quand elle attaque.",
                            IconeURL = "🐱‍🏍",
                            Name = "Attack boost"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Inverse l'attaque et la défense de toutes les cartes en jeu. Il se produit avant que la carte attaque.",
                            IconeURL = "💥",
                            Name = "Chaos"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Ajoute une valeur de poison à la carte attaquée. Le poison diminue ensuite la vie d’une carte de la valeur du poison à la fin de son activation.",
                            IconeURL = "🧪",
                            Name = "Poison"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Empêche une carte d’agir pendant son activation durant X tours. Mais elle reçoit quand même les dégâts de poison",
                            IconeURL = "💫",
                            Name = "Stunned"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Donne l'invulnérabilité à la carte durant X tours. La carte ne peut pas prendre de dégâts, même des sorts.",
                            IconeURL = "🛡",
                            Name = "Protection"
                        });
                });

            modelBuilder.Entity("Models.Models.Probability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseQty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rarity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PackId");

                    b.ToTable("Probabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseQty = 0,
                            PackId = 1,
                            Rarity = 1,
                            Value = 0.29999999999999999
                        },
                        new
                        {
                            Id = 2,
                            BaseQty = 1,
                            PackId = 2,
                            Rarity = 1,
                            Value = 0.29999999999999999
                        },
                        new
                        {
                            Id = 3,
                            BaseQty = 0,
                            PackId = 2,
                            Rarity = 2,
                            Value = 0.10000000000000001
                        },
                        new
                        {
                            Id = 4,
                            BaseQty = 0,
                            PackId = 2,
                            Rarity = 3,
                            Value = 0.02
                        },
                        new
                        {
                            Id = 5,
                            BaseQty = 1,
                            PackId = 3,
                            Rarity = 2,
                            Value = 0.25
                        },
                        new
                        {
                            Id = 6,
                            BaseQty = 0,
                            PackId = 3,
                            Rarity = 3,
                            Value = 0.10000000000000001
                        });
                });

            modelBuilder.Entity("Models.Models.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Icone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Spell");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fait X dégâts à TOUTES les cartes en jeu.",
                            Icone = "🌎",
                            Name = "Earthquake",
                            Value = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Fait 1 à 6 de dégâts à une carte adverse (au hazard).",
                            Icone = "🤕",
                            Name = "Random Pain",
                            Value = 0
                        });
                });

            modelBuilder.Entity("Models.Models.StartingCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("StartingCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2
                        },
                        new
                        {
                            Id = 3,
                            CardId = 3
                        },
                        new
                        {
                            Id = 4,
                            CardId = 4
                        },
                        new
                        {
                            Id = 5,
                            CardId = 5
                        },
                        new
                        {
                            Id = 6,
                            CardId = 6
                        },
                        new
                        {
                            Id = 7,
                            CardId = 7
                        },
                        new
                        {
                            Id = 8,
                            CardId = 8
                        },
                        new
                        {
                            Id = 9,
                            CardId = 9
                        },
                        new
                        {
                            Id = 10,
                            CardId = 26
                        },
                        new
                        {
                            Id = 11,
                            CardId = 27
                        });
                });

            modelBuilder.Entity("Models.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Icone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "La carte est stunned, elle ne peut pas prendre d'action.",
                            Icone = "💫",
                            Name = "Stunned"
                        },
                        new
                        {
                            Id = 1,
                            Description = "La carte est poisoned, elle prend du dégât de poison.",
                            Icone = "🧪",
                            Name = "Poisoned"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Donne l'invulnérabilité à la carte durant X tours. La carte ne peut pas prendre de dégâts, même des sorts.",
                            Icone = "🛡",
                            Name = "Protected"
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSpell")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rareté")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SpellId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SpellId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attack = 4,
                            Cost = 4,
                            Health = 3,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/001.png",
                            IsSpell = false,
                            Name = "Bulbizarre",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 2,
                            Attack = 5,
                            Cost = 6,
                            Health = 4,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/002.png",
                            IsSpell = false,
                            Name = "Herbizarre",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 3,
                            Attack = 6,
                            Cost = 8,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/003.png",
                            IsSpell = false,
                            Name = "Florizarre",
                            Rareté = 2
                        },
                        new
                        {
                            Id = 4,
                            Attack = 4,
                            Cost = 4,
                            Health = 3,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/004.png",
                            IsSpell = false,
                            Name = "Salamèche",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 5,
                            Attack = 5,
                            Cost = 6,
                            Health = 4,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/005.png",
                            IsSpell = false,
                            Name = "Reptincel",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 6,
                            Attack = 7,
                            Cost = 8,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/006.png",
                            IsSpell = false,
                            Name = "Dracaufeu",
                            Rareté = 2
                        },
                        new
                        {
                            Id = 7,
                            Attack = 3,
                            Cost = 4,
                            Health = 3,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/007.png",
                            IsSpell = false,
                            Name = "Carapuce",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 8,
                            Attack = 4,
                            Cost = 6,
                            Health = 4,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/008.png",
                            IsSpell = false,
                            Name = "Carabaffe",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 9,
                            Attack = 5,
                            Cost = 8,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/009.png",
                            IsSpell = false,
                            Name = "Tortank",
                            Rareté = 2
                        },
                        new
                        {
                            Id = 25,
                            Attack = 4,
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/025.png",
                            IsSpell = false,
                            Name = "Pikachu",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 26,
                            Attack = 6,
                            Cost = 5,
                            Health = 4,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/026.png",
                            IsSpell = false,
                            Name = "Raichu",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 27,
                            Attack = 5,
                            Cost = 2,
                            Health = 3,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/027_f2.png",
                            IsSpell = false,
                            Name = "Sabelette d'Alola",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 28,
                            Attack = 6,
                            Cost = 3,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/028_f2.png",
                            IsSpell = false,
                            Name = "Sablaireau d'Alola",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 102,
                            Attack = 4,
                            Cost = 3,
                            Health = 4,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/102.png",
                            IsSpell = false,
                            Name = "Noeunoeuf",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 103,
                            Attack = 6,
                            Cost = 5,
                            Health = 6,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/103.png",
                            IsSpell = false,
                            Name = "Noadkoko",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 111,
                            Attack = 5,
                            Cost = 4,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/111.png",
                            IsSpell = false,
                            Name = "Rhinocorne",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 112,
                            Attack = 8,
                            Cost = 8,
                            Health = 7,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/112.png",
                            IsSpell = false,
                            Name = "Rhinoféros",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 150,
                            Attack = 9,
                            Cost = 9,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/150.png",
                            IsSpell = false,
                            Name = "Mewtwo",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 151,
                            Attack = 6,
                            Cost = 6,
                            Health = 6,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/151.png",
                            IsSpell = false,
                            Name = "Mew",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 201,
                            Attack = 5,
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/201.png",
                            IsSpell = false,
                            Name = "Zarbi",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 203,
                            Attack = 5,
                            Cost = 4,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/203.png",
                            IsSpell = false,
                            Name = "Girafarig",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 249,
                            Attack = 8,
                            Cost = 7,
                            Health = 7,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/249.png",
                            IsSpell = false,
                            Name = "Lugia",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 250,
                            Attack = 8,
                            Cost = 7,
                            Health = 7,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/250.png",
                            IsSpell = false,
                            Name = "Ho-Oh",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 273,
                            Attack = 3,
                            Cost = 2,
                            Health = 3,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/273.png",
                            IsSpell = false,
                            Name = "Grainipiot",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 274,
                            Attack = 5,
                            Cost = 4,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/274.png",
                            IsSpell = false,
                            Name = "Pifeuil",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 275,
                            Attack = 6,
                            Cost = 5,
                            Health = 6,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/275.png",
                            IsSpell = false,
                            Name = "Tengalice",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 287,
                            Attack = 4,
                            Cost = 3,
                            Health = 4,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/287.png",
                            IsSpell = false,
                            Name = "Parecool",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 288,
                            Attack = 5,
                            Cost = 4,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/288.png",
                            IsSpell = false,
                            Name = "Vigoroth ",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 289,
                            Attack = 10,
                            Cost = 9,
                            Health = 9,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/289.png",
                            IsSpell = false,
                            Name = "Monaflèmit",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 384,
                            Attack = 9,
                            Cost = 9,
                            Health = 7,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/384.png",
                            IsSpell = false,
                            Name = "Rayquaza",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 459,
                            Attack = 4,
                            Cost = 3,
                            Health = 4,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/459.png",
                            IsSpell = false,
                            Name = "Blizzi",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 460,
                            Attack = 6,
                            Cost = 5,
                            Health = 6,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/460.png",
                            IsSpell = false,
                            Name = "Blizzaroi",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 493,
                            Attack = 8,
                            Cost = 8,
                            Health = 8,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/493.png",
                            IsSpell = false,
                            Name = "Arceus",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 570,
                            Attack = 4,
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/570.png",
                            IsSpell = false,
                            Name = "Zorua",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 571,
                            Attack = 7,
                            Cost = 5,
                            Health = 4,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/571.png",
                            IsSpell = false,
                            Name = "Zoroark",
                            Rareté = 2
                        },
                        new
                        {
                            Id = 643,
                            Attack = 8,
                            Cost = 7,
                            Health = 6,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/643.png",
                            IsSpell = false,
                            Name = "Reshiram",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 644,
                            Attack = 6,
                            Cost = 7,
                            Health = 8,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/644.png",
                            IsSpell = false,
                            Name = "Zekrom",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 656,
                            Attack = 4,
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/656.png",
                            IsSpell = false,
                            Name = "Grenousse",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 657,
                            Attack = 4,
                            Cost = 3,
                            Health = 4,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/657.png",
                            IsSpell = false,
                            Name = "Croâporal",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 658,
                            Attack = 6,
                            Cost = 5,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/658_f2.png",
                            IsSpell = false,
                            Name = "Amphinobi",
                            Rareté = 2
                        },
                        new
                        {
                            Id = 661,
                            Attack = 3,
                            Cost = 2,
                            Health = 3,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/661.png",
                            IsSpell = false,
                            Name = "Passerouge",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 662,
                            Attack = 5,
                            Cost = 3,
                            Health = 4,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/662.png",
                            IsSpell = false,
                            Name = "Braisillon",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 663,
                            Attack = 5,
                            Cost = 5,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/663.png",
                            IsSpell = false,
                            Name = "Flambusard",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 714,
                            Attack = 3,
                            Cost = 2,
                            Health = 3,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/714.png",
                            IsSpell = false,
                            Name = "Sonistrelle",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 715,
                            Attack = 5,
                            Cost = 5,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/715.png",
                            IsSpell = false,
                            Name = "Bruyverne",
                            Rareté = 2
                        },
                        new
                        {
                            Id = 716,
                            Attack = 7,
                            Cost = 6,
                            Health = 7,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/716.png",
                            IsSpell = false,
                            Name = "Xerneas",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 717,
                            Attack = 8,
                            Cost = 7,
                            Health = 8,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/717.png",
                            IsSpell = false,
                            Name = "Yveltal",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 720,
                            Attack = 7,
                            Cost = 6,
                            Health = 5,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/720.png",
                            IsSpell = false,
                            Name = "Hoopa",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 802,
                            Attack = 8,
                            Cost = 6,
                            Health = 6,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/802.png",
                            IsSpell = false,
                            Name = "Marshadow",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 885,
                            Attack = 4,
                            Cost = 2,
                            Health = 2,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/885.png",
                            IsSpell = false,
                            Name = "Fantyrm",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 886,
                            Attack = 5,
                            Cost = 4,
                            Health = 4,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/886.png",
                            IsSpell = false,
                            Name = "Dispareptil",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 887,
                            Attack = 8,
                            Cost = 6,
                            Health = 6,
                            ImageUrl = "https://www.pokemon.com/static-assets/content-assets/cms2/img/pokedex/full/887.png",
                            IsSpell = false,
                            Name = "Lanssorien",
                            Rareté = 2
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.GameConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("nbCardsToDraw")
                        .HasColumnType("INTEGER");

                    b.Property<int>("nbMaxCartesDecks")
                        .HasColumnType("INTEGER");

                    b.Property<int>("nbMaxDecks")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GameConfig");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Mana = 3,
                            nbCardsToDraw = 4,
                            nbMaxCartesDecks = 10,
                            nbMaxDecks = 3
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMatchCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlayerATurn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerDataAId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerDataBId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserBId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WinnerUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerDataAId");

                    b.HasIndex("PlayerDataBId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayersData");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId3")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("MatchPlayerDataId");

                    b.HasIndex("MatchPlayerDataId1");

                    b.HasIndex("MatchPlayerDataId2");

                    b.HasIndex("MatchPlayerDataId3");

                    b.ToTable("PlayableCard");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defaite")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Money")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Victoire")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Defaite = 0,
                            Money = 20,
                            Name = "Test player 1",
                            UserId = "User1Id",
                            Victoire = 0
                        },
                        new
                        {
                            Id = 2,
                            Defaite = 0,
                            Money = 20,
                            Name = "Test player 2",
                            UserId = "User2Id",
                            Victoire = 0
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Attente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Elo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Models.CardPower", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany("CardPowers")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Power", "Power")
                        .WithMany()
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("Models.Models.Deck", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany("listeDeck")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Models.Models.OwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("Models.Models.Deck", null)
                        .WithMany("CarteJoueurs")
                        .HasForeignKey("DeckId");

                    b.HasOne("Models.Models.Deck", null)
                        .WithMany("CarteSuprime")
                        .HasForeignKey("DeckId1");

                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany("OwnedCards")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Card");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Models.Models.PlayableCardStatus", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.PlayableCard", null)
                        .WithMany("PlayableCardsStatus")
                        .HasForeignKey("PlayableCardId");

                    b.HasOne("Models.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Models.Models.Probability", b =>
                {
                    b.HasOne("Models.Models.Pack", "Pack")
                        .WithMany()
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("Models.Models.StartingCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.HasOne("Models.Models.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataA")
                        .WithMany()
                        .HasForeignKey("PlayerDataAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataB")
                        .WithMany()
                        .HasForeignKey("PlayerDataBId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlayerDataA");

                    b.Navigation("PlayerDataB");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("BattleField")
                        .HasForeignKey("MatchPlayerDataId");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("CardsPile")
                        .HasForeignKey("MatchPlayerDataId1");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Graveyard")
                        .HasForeignKey("MatchPlayerDataId2");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Hand")
                        .HasForeignKey("MatchPlayerDataId3");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayerInfo", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithOne("playerInfo")
                        .HasForeignKey("Super_Cartes_Infinies.Models.PlayerInfo", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Models.Models.Deck", b =>
                {
                    b.Navigation("CarteJoueurs");

                    b.Navigation("CarteSuprime");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Navigation("CardPowers");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Navigation("BattleField");

                    b.Navigation("CardsPile");

                    b.Navigation("Graveyard");

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.Navigation("PlayableCardsStatus");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Navigation("OwnedCards");

                    b.Navigation("listeDeck");

                    b.Navigation("playerInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
