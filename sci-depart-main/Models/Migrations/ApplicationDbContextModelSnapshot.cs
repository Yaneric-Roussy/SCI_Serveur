// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Super_Cartes_Infinies.Data;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111112",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bcc81a8-6064-4011-8a30-0765fa61f829",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMgH9iyaHLC7URFWscaZlRobVNrVHj9GcN/04FQDVP0gm8Uw3hnOVrnAlkSD1g0D5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b611a33-bc2e-4751-be6a-692abf148704",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "User1Id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "486fdeaa-5a9b-4426-a8ca-47563ab718dc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "996e7f7d-ab5c-4886-b190-f3a9689739fd",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "User2Id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b128daf2-8210-4a0c-8716-2efa29d3260e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4f8327a-26cd-430c-aa82-0942661ef0f6",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11111111-1111-1111-1111-111111111111",
                            RoleId = "11111111-1111-1111-1111-111111111112"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Models.CardPower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PowerId");

                    b.ToTable("CardPower");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            PowerId = 1,
                            Value = 0
                        },
                        new
                        {
                            Id = 2,
                            CardId = 1,
                            PowerId = 3,
                            Value = 1
                        },
                        new
                        {
                            Id = 3,
                            CardId = 1,
                            PowerId = 4,
                            Value = 4
                        },
                        new
                        {
                            Id = 4,
                            CardId = 2,
                            PowerId = 2,
                            Value = 2
                        },
                        new
                        {
                            Id = 5,
                            CardId = 2,
                            PowerId = 3,
                            Value = 1
                        },
                        new
                        {
                            Id = 6,
                            CardId = 3,
                            PowerId = 5,
                            Value = 0
                        },
                        new
                        {
                            Id = 7,
                            CardId = 4,
                            PowerId = 4,
                            Value = 5
                        },
                        new
                        {
                            Id = 8,
                            CardId = 5,
                            PowerId = 6,
                            Value = 2
                        },
                        new
                        {
                            Id = 9,
                            CardId = 6,
                            PowerId = 7,
                            Value = 2
                        },
                        new
                        {
                            Id = 10,
                            CardId = 7,
                            PowerId = 8,
                            Value = 2
                        });
                });

            modelBuilder.Entity("Models.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Courant")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("Models.Models.OwnedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeckId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("DeckId");

                    b.HasIndex("DeckId1");

                    b.HasIndex("PlayerId");

                    b.ToTable("OwnedCard");
                });

            modelBuilder.Entity("Models.Models.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NbCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rareté")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Packs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 1,
                            ImageUrl = "https://www.realite-virtuelle.com/wp-content/uploads/2021/02/rayquaza-tout-savoir-guide.jpg",
                            Name = "Le platre",
                            NbCard = 3,
                            Rareté = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Cost = 2,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQZahnOokotXrBgjZ2ywo9aQaw7oLO-JqE1rA&s",
                            Name = "La brique",
                            NbCard = 4,
                            Rareté = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Cost = 2,
                            ImageUrl = "https://m.media-amazon.com/images/I/61y74SPNLnL._AC_UF894,1000_QL80_.jpg",
                            Name = "La céramique",
                            NbCard = 5,
                            Rareté = 1,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Models.Models.PlayableCardStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayableCardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayableCardId");

                    b.HasIndex("StatusId");

                    b.ToTable("PlayableCardStatus");
                });

            modelBuilder.Entity("Models.Models.Power", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IconeURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Power");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Permet à une carte d’attaquer en « premier » et de ne pas recevoir de dégât si elle tue la carte de l’adversaire.",
                            IconeURL = "🥇",
                            Name = "First strike"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lorsqu’une carte défend, elle inflige X de dégâts AVANT de recevoir des dégâts. Si l’attaquant est tué par ces dégâts, l’attaque s’arrête et le défenseur ne reçoit pas de dégâts.",
                            IconeURL = "🌹",
                            Name = "Thorns"
                        },
                        new
                        {
                            Id = 3,
                            Description = "soigne les cartes alliées de X incluant elle-même AVANT d’attaquer (mais les cartes ne peuvent pas avoir plus de health qu’au départ.)",
                            IconeURL = "💖",
                            Name = "Heal"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Augmente de X les dégâts que la carte inflige quand elle attaque.",
                            IconeURL = "🐱‍🏍",
                            Name = "Attack boost"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Inverse l'attaque et la défense de toutes les cartes en jeu. Il se produit avant que la carte attaque.",
                            IconeURL = "💥",
                            Name = "Chaos"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Ajoute une valeur de poison à la carte attaquée. Le poison diminue ensuite la vie d’une carte de la valeur du poison à la fin de son activation.",
                            IconeURL = "🧪",
                            Name = "Poison"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Empêche une carte d’agir pendant son activation durant X tours. Mais elle reçoit quand même les dégâts de poison",
                            IconeURL = "💫",
                            Name = "Stunned"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Donne l'invulnérabilité à la carte durant X tours. La carte ne peut pas prendre de dégâts, même des sorts.",
                            IconeURL = "🛡",
                            Name = "Protection"
                        });
                });

            modelBuilder.Entity("Models.Models.Probability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseQty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rarity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PackId");

                    b.ToTable("Probabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseQty = 0,
                            PackId = 1,
                            Rarity = 1,
                            Value = 0.29999999999999999
                        },
                        new
                        {
                            Id = 2,
                            BaseQty = 1,
                            PackId = 2,
                            Rarity = 1,
                            Value = 0.29999999999999999
                        },
                        new
                        {
                            Id = 3,
                            BaseQty = 0,
                            PackId = 2,
                            Rarity = 2,
                            Value = 0.10000000000000001
                        },
                        new
                        {
                            Id = 4,
                            BaseQty = 0,
                            PackId = 2,
                            Rarity = 3,
                            Value = 0.02
                        },
                        new
                        {
                            Id = 5,
                            BaseQty = 1,
                            PackId = 3,
                            Rarity = 2,
                            Value = 0.25
                        },
                        new
                        {
                            Id = 6,
                            BaseQty = 0,
                            PackId = 3,
                            Rarity = 3,
                            Value = 0.10000000000000001
                        });
                });

            modelBuilder.Entity("Models.Models.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Icone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Spell");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fait X dégâts à TOUTES les cartes en jeu.",
                            Icone = "🌎",
                            Name = "Earthquake",
                            Value = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Fait 1 à 6 de dégâts à une carte adverse (au hazard).",
                            Icone = "🤕",
                            Name = "Random Pain",
                            Value = 0
                        });
                });

            modelBuilder.Entity("Models.Models.StartingCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("StartingCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2
                        },
                        new
                        {
                            Id = 3,
                            CardId = 3
                        },
                        new
                        {
                            Id = 4,
                            CardId = 4
                        },
                        new
                        {
                            Id = 5,
                            CardId = 5
                        },
                        new
                        {
                            Id = 6,
                            CardId = 6
                        },
                        new
                        {
                            Id = 7,
                            CardId = 7
                        },
                        new
                        {
                            Id = 8,
                            CardId = 8
                        },
                        new
                        {
                            Id = 9,
                            CardId = 9
                        },
                        new
                        {
                            Id = 10,
                            CardId = 11
                        },
                        new
                        {
                            Id = 11,
                            CardId = 12
                        });
                });

            modelBuilder.Entity("Models.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Icone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "La carte est stunned, elle ne peut pas prendre d'action.",
                            Icone = "💫",
                            Name = "Stunned"
                        },
                        new
                        {
                            Id = 1,
                            Description = "La carte est poisoned, elle prend du dégât de poison.",
                            Icone = "🧪",
                            Name = "Poisoned"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Donne l'invulnérabilité à la carte durant X tours. La carte ne peut pas prendre de dégâts, même des sorts.",
                            Icone = "🛡",
                            Name = "Protected"
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSpell")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rareté")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SpellId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SpellId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attack = 3,
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://i.pinimg.com/originals/a8/16/49/a81649bd4b0f032ce633161c5a076b87.jpg",
                            IsSpell = false,
                            Name = "Chat Dragon",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 2,
                            Attack = 2,
                            Cost = 3,
                            Health = 5,
                            ImageUrl = "https://i0.wp.com/thediscerningcat.com/wp-content/uploads/2021/02/tabby-cat-wearing-sunglasses.jpg",
                            IsSpell = false,
                            Name = "Chat Awesome",
                            Rareté = 0
                        },
                        new
                        {
                            Id = 3,
                            Attack = 2,
                            Cost = 1,
                            Health = 1,
                            ImageUrl = "https://cdn.wallpapersafari.com/27/53/SZ8PO9.jpg",
                            IsSpell = false,
                            Name = "Chatton Laser",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 4,
                            Attack = 8,
                            Cost = 4,
                            Health = 4,
                            ImageUrl = "https://wallpapers.com/images/hd/epic-cat-poster-baavft05ylgta4j8.jpg",
                            IsSpell = false,
                            Name = "Chat Spacial",
                            Rareté = 1
                        },
                        new
                        {
                            Id = 5,
                            Attack = 7,
                            Cost = 5,
                            Health = 7,
                            ImageUrl = "https://i.etsystatic.com/6230905/r/il/32aa5a/3474618751/il_fullxfull.3474618751_mfvf.jpg",
                            IsSpell = false,
                            Name = "Chat Guerrier",
                            Rareté = 2
                        },
                        new
                        {
                            Id = 6,
                            Attack = 4,
                            Cost = 2,
                            Health = 2,
                            ImageUrl = "https://store.playstation.com/store/api/chihiro/00_09_000/container/AU/en/99/EP2402-CUSA05624_00-ETH0000000002875/0/image?_version=00_09_000&platform=chihiro&bg_color=000000&opacity=100&w=720&h=720",
                            IsSpell = false,
                            Name = "Chat Laser",
                            Rareté = 2
                        },
                        new
                        {
                            Id = 7,
                            Attack = 6,
                            Cost = 4,
                            Health = 3,
                            ImageUrl = "https://images.squarespace-cdn.com/content/51b3dc8ee4b051b96ceb10de/1394662654865-JKOZ7ZFF39247VYDTGG9/hilarious-jedi-cats-fight-video-preview.jpg?content-type=image%2Fjpeg",
                            IsSpell = false,
                            Name = "Jedi Chat",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 8,
                            Attack = 1,
                            Cost = 2,
                            Health = 9,
                            ImageUrl = "https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/c89c9a3c-7848-4bd5-9306-417c97096ae5/dh8sghm-7bebd975-51f2-4728-87bc-fb3cef176af5.jpg/v1/fit/w_750,h_1000,q_70,strp/another_lucifur_blob_by_slugyyycat_dh8sghm-375w-2x.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7ImhlaWdodCI6Ijw9MTAwMCIsInBhdGgiOiJcL2ZcL2M4OWM5YTNjLTc4NDgtNGJkNS05MzA2LTQxN2M5NzA5NmFlNVwvZGg4c2dobS03YmViZDk3NS01MWYyLTQ3MjgtODdiYy1mYjNjZWYxNzZhZjUuanBnIiwid2lkdGgiOiI8PTc1MCJ9XV0sImF1ZCI6WyJ1cm46c2VydmljZTppbWFnZS5vcGVyYXRpb25zIl19.7oGugpkEX4yqfhiOXlo4TfqzatOuHaCu2aEi-Lnw_40",
                            IsSpell = false,
                            Name = "Blob Chat",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 9,
                            Attack = 5,
                            Cost = 2,
                            Health = 1,
                            ImageUrl = "https://townsquare.media/site/142/files/2011/08/jedicats.jpg?w=980&q=75",
                            IsSpell = false,
                            Name = "Jedi Chatton",
                            Rareté = 3
                        },
                        new
                        {
                            Id = 10,
                            Attack = 6,
                            Cost = 2,
                            Health = 1,
                            ImageUrl = "https://cdn.theatlantic.com/thumbor/fOZjgqHH0RmXA1A5ek-yDz697W4=/133x0:2091x1020/1200x625/media/img/mt/2015/12/RTRD62Q/original.jpg",
                            IsSpell = false,
                            Name = "Chat Furtif",
                            Rareté = 2
                        },
                        new
                        {
                            Id = 11,
                            Attack = 0,
                            Cost = 2,
                            Health = 0,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR936kxkL3CDGYOfTwzxYl8nAZ_KE3GzXk6GQ&s",
                            IsSpell = true,
                            Name = "Random Pain",
                            Rareté = 1,
                            SpellId = 2
                        },
                        new
                        {
                            Id = 12,
                            Attack = 0,
                            Cost = 2,
                            Health = 0,
                            ImageUrl = "https://catpedia.wiki/images/5/59/Milly.png",
                            IsSpell = true,
                            Name = "Earthquake",
                            Rareté = 1,
                            SpellId = 1
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.GameConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("nbCardsToDraw")
                        .HasColumnType("INTEGER");

                    b.Property<int>("nbMaxCartesDecks")
                        .HasColumnType("INTEGER");

                    b.Property<int>("nbMaxDecks")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GameConfig");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Mana = 3,
                            nbCardsToDraw = 4,
                            nbMaxCartesDecks = 10,
                            nbMaxDecks = 3
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMatchCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlayerATurn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerDataAId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerDataBId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserBId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WinnerUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerDataAId");

                    b.HasIndex("PlayerDataBId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayersData");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId3")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("MatchPlayerDataId");

                    b.HasIndex("MatchPlayerDataId1");

                    b.HasIndex("MatchPlayerDataId2");

                    b.HasIndex("MatchPlayerDataId3");

                    b.ToTable("PlayableCard");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Money")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Money = 20,
                            Name = "Test player 1",
                            UserId = "User1Id"
                        },
                        new
                        {
                            Id = 2,
                            Money = 20,
                            Name = "Test player 2",
                            UserId = "User2Id"
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Attente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Elo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Models.CardPower", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany("CardPowers")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Power", "Power")
                        .WithMany()
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("Models.Models.Deck", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany("listeDeck")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Models.Models.OwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("Models.Models.Deck", null)
                        .WithMany("CarteJoueurs")
                        .HasForeignKey("DeckId");

                    b.HasOne("Models.Models.Deck", null)
                        .WithMany("CarteSuprime")
                        .HasForeignKey("DeckId1");

                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany("OwnedCards")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Card");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Models.Models.PlayableCardStatus", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.PlayableCard", null)
                        .WithMany("PlayableCardsStatus")
                        .HasForeignKey("PlayableCardId");

                    b.HasOne("Models.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Models.Models.Probability", b =>
                {
                    b.HasOne("Models.Models.Pack", "Pack")
                        .WithMany()
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("Models.Models.StartingCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.HasOne("Models.Models.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataA")
                        .WithMany()
                        .HasForeignKey("PlayerDataAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataB")
                        .WithMany()
                        .HasForeignKey("PlayerDataBId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlayerDataA");

                    b.Navigation("PlayerDataB");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("BattleField")
                        .HasForeignKey("MatchPlayerDataId");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("CardsPile")
                        .HasForeignKey("MatchPlayerDataId1");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Graveyard")
                        .HasForeignKey("MatchPlayerDataId2");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Hand")
                        .HasForeignKey("MatchPlayerDataId3");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayerInfo", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithOne("playerInfo")
                        .HasForeignKey("Super_Cartes_Infinies.Models.PlayerInfo", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Models.Models.Deck", b =>
                {
                    b.Navigation("CarteJoueurs");

                    b.Navigation("CarteSuprime");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Navigation("CardPowers");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Navigation("BattleField");

                    b.Navigation("CardsPile");

                    b.Navigation("Graveyard");

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.Navigation("PlayableCardsStatus");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Navigation("OwnedCards");

                    b.Navigation("listeDeck");

                    b.Navigation("playerInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
